{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jessicsw/Desktop/Projects/Counter/node_modules/react-navigation-fluid-transitions/TransitionOverlayView.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PropTypes from 'prop-types';\nimport sortBy from 'lodash.sortby';\nimport TransitionItem from \"./TransitionItem\";\nimport { TransitionContext, RouteDirection } from \"./Types\";\nimport * as Constants from \"./TransitionConstants\";\nimport { initTransitionTypes, getTransitionElements } from \"./Transitions\";\nimport { initInterpolatorTypes, getSharedElements, getAnchoredElements } from \"./Interpolators\";\nimport { compareSharedElements, compareTransitionElements } from \"./Utils/utilities\";\ninitTransitionTypes();\ninitInterpolatorTypes();\n\nvar TransitionOverlayView = function (_React$Component) {\n  _inherits(TransitionOverlayView, _React$Component);\n\n  var _super = _createSuper(TransitionOverlayView);\n\n  function TransitionOverlayView(props, context) {\n    var _this;\n\n    _classCallCheck(this, TransitionOverlayView);\n\n    _this = _super.call(this, props, context);\n    _this._isMounted = false;\n    _this.getInterpolation = _this.getInterpolation.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TransitionOverlayView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          fromRoute = _this$props.fromRoute,\n          toRoute = _this$props.toRoute;\n      var _this$props2 = this.props,\n          transitionElements = _this$props2.transitionElements,\n          sharedElements = _this$props2.sharedElements;\n      var from = fromRoute;\n      var to = toRoute;\n      transitionElements = transitionElements ? transitionElements.filter(function (i) {\n        return !i.inline && (i.route === from || i.route === to);\n      }) : [];\n      sharedElements = sharedElements ? sharedElements.filter(function (p) {\n        return (p.fromItem.route === from || p.fromItem.route === to) && (p.toItem.route === from || p.toItem.route === to);\n      }) : [];\n      var transitionContext = this.getTransitionContext(transitionElements);\n\n      if (!transitionContext || !this.getMetricsReady() || sharedElements.length === 0 && transitionElements.length === 0) {\n        return React.createElement(View, {\n          style: styles.overlay,\n          pointerEvents: \"none\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 14\n          }\n        });\n      }\n\n      this._interpolation = null;\n      this._nativeInterpolation = null;\n      var transitionViews = getTransitionElements(transitionElements, transitionContext);\n      var sharedElementViews = getSharedElements(sharedElements, this.getInterpolation);\n      var anchoredViews = getAnchoredElements(sharedElements, this.getInterpolation);\n      var views = [].concat(_toConsumableArray(transitionViews), _toConsumableArray(sharedElementViews), _toConsumableArray(anchoredViews));\n      views = sortBy(views, 'props.index');\n      return React.createElement(Animated.View, {\n        style: [styles.overlay, this.getVisibilityStyle()],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 7\n        }\n      }, views);\n    }\n  }, {\n    key: \"getVisibilityStyle\",\n    value: function getVisibilityStyle() {\n      var getTransitionProgress = this.context.getTransitionProgress;\n      var index = this.props.index;\n      if (!getTransitionProgress) return {};\n      var progress = getTransitionProgress();\n      if (!progress) return {\n        opacity: 0\n      };\n      var inputRange = [index - 1, index - 1 + Constants.OP, index - Constants.OP, index];\n      var outputRange = [0, 1, 1, 0];\n      var visibility = progress.interpolate({\n        inputRange: inputRange,\n        outputRange: outputRange\n      });\n      return {\n        opacity: visibility\n      };\n    }\n  }, {\n    key: \"getMetricsReady\",\n    value: function getMetricsReady() {\n      var metricsReady = true;\n      var _this$props3 = this.props,\n          transitionElements = _this$props3.transitionElements,\n          sharedElements = _this$props3.sharedElements;\n\n      if (transitionElements) {\n        transitionElements.forEach(function (item) {\n          if (!item.metrics) {\n            metricsReady = false;\n          }\n        });\n      }\n\n      if (sharedElements) {\n        sharedElements.forEach(function (pair) {\n          if (!pair.toItem.metrics || !pair.fromItem.metrics) {\n            metricsReady = false;\n          }\n\n          if (pair.fromItem && pair.fromItem.anchors) {\n            for (var n = 0; n < pair.fromItem.anchors.length; n++) {\n              if (!pair.fromItem.anchors[n].metrics) {\n                metricsReady = false;\n                break;\n              }\n            }\n          }\n\n          if (pair.toItem && pair.toItem.anchors) {\n            for (var _n = 0; _n < pair.toItem.anchors.length; _n++) {\n              if (!pair.toItem.anchors[_n].metrics) {\n                metricsReady = false;\n                break;\n              }\n            }\n          }\n        });\n      }\n\n      return metricsReady;\n    }\n  }, {\n    key: \"getInterpolation\",\n    value: function getInterpolation(useNativeDriver) {\n      var _this$context = this.context,\n          getTransitionProgress = _this$context.getTransitionProgress,\n          getIndex = _this$context.getIndex;\n      if (!getTransitionProgress || !getIndex) return null;\n      var index = getIndex();\n      var inputRange = [index - 1, index, index + 1];\n\n      if (useNativeDriver && !this._nativeInterpolation) {\n        this._nativeInterpolation = getTransitionProgress(true).interpolate({\n          inputRange: inputRange,\n          outputRange: [0, 1, 0]\n        });\n      } else if (!useNativeDriver && !this._interpolation) {\n        this._interpolation = getTransitionProgress(false).interpolate({\n          inputRange: inputRange,\n          outputRange: [0, 1, 0]\n        });\n      }\n\n      if (useNativeDriver) return this._nativeInterpolation;\n      return this._interpolation;\n    }\n  }, {\n    key: \"getTransitionContext\",\n    value: function getTransitionContext(transitionElements) {\n      var _this$context2 = this.context,\n          getDirectionForRoute = _this$context2.getDirectionForRoute,\n          getIndex = _this$context2.getIndex,\n          getDirection = _this$context2.getDirection,\n          getRoutes = _this$context2.getRoutes,\n          getTransitionProgress = _this$context2.getTransitionProgress;\n\n      if (!transitionElements || !getDirectionForRoute || !getDirection || !getRoutes || !getIndex || !getTransitionProgress) {\n        return null;\n      }\n\n      var delayCountFrom = transitionElements.filter(function (item) {\n        return getDirectionForRoute(item.name, item.route) === RouteDirection.from;\n      }).reduce(function (prevValue, item) {\n        return item.delay ? prevValue + 1 : prevValue;\n      }, 0);\n      var delayCountTo = transitionElements.filter(function (item) {\n        return getDirectionForRoute(item.name, item.route) === RouteDirection.to;\n      }).reduce(function (prevValue, item) {\n        return item.delay ? prevValue + 1 : prevValue;\n      }, 0);\n      var navDirection = getDirection();\n      var delayIndexFrom = 0;\n      var delayIndexTo = Math.max(0, delayCountTo - 1);\n      var delayFromFactor = 1;\n      var delayToFactor = -1;\n      return {\n        delayCountFrom: delayCountFrom,\n        delayCountTo: delayCountTo,\n        navDirection: navDirection,\n        delayIndexFrom: delayIndexFrom,\n        delayIndexTo: delayIndexTo,\n        delayToFactor: delayToFactor,\n        delayFromFactor: delayFromFactor,\n        getDirectionForRoute: getDirectionForRoute,\n        getIndex: getIndex,\n        getTransitionProgress: getTransitionProgress,\n        getRoutes: getRoutes\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }]);\n\n  return TransitionOverlayView;\n}(React.Component);\n\nTransitionOverlayView.contextTypes = {\n  getTransitionProgress: PropTypes.func,\n  getDirectionForRoute: PropTypes.func,\n  getDirection: PropTypes.func,\n  getIndex: PropTypes.func,\n  getRoutes: PropTypes.func\n};\nvar styles = StyleSheet.create({\n  overlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n});\nexport default TransitionOverlayView;","map":{"version":3,"sources":["/Users/jessicsw/Desktop/Projects/Counter/node_modules/react-navigation-fluid-transitions/TransitionOverlayView.js"],"names":["React","PropTypes","sortBy","TransitionItem","TransitionContext","RouteDirection","Constants","initTransitionTypes","getTransitionElements","initInterpolatorTypes","getSharedElements","getAnchoredElements","compareSharedElements","compareTransitionElements","TransitionOverlayView","props","context","_isMounted","getInterpolation","bind","fromRoute","toRoute","transitionElements","sharedElements","from","to","filter","i","inline","route","p","fromItem","toItem","transitionContext","getTransitionContext","getMetricsReady","length","styles","overlay","_interpolation","_nativeInterpolation","transitionViews","sharedElementViews","anchoredViews","views","getVisibilityStyle","getTransitionProgress","index","progress","opacity","inputRange","OP","outputRange","visibility","interpolate","metricsReady","forEach","item","metrics","pair","anchors","n","useNativeDriver","getIndex","getDirectionForRoute","getDirection","getRoutes","delayCountFrom","name","reduce","prevValue","delay","delayCountTo","navDirection","delayIndexFrom","delayIndexTo","Math","max","delayFromFactor","delayToFactor","Component","contextTypes","func","StyleSheet","create","position","top","left","right","bottom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, Animated } from 'react-native';\nimport PropTypes from 'prop-types';\nimport sortBy from 'lodash.sortby';\n\nimport TransitionItem from './TransitionItem';\nimport { TransitionContext, RouteDirection } from './Types';\nimport * as Constants from './TransitionConstants';\n\nimport { initTransitionTypes, getTransitionElements } from './Transitions';\nimport { initInterpolatorTypes, getSharedElements, getAnchoredElements } from './Interpolators';\nimport { compareSharedElements, compareTransitionElements } from './Utils/utilities';\n\ninitTransitionTypes();\ninitInterpolatorTypes();\n\ntype Props = {\n  fromRoute: string,\n  toRoute: string,\n  visibility: Animated.Value,\n  direction: number,\n  index: number,\n  sharedElements: Array<any>,\n  transitionElements: Array<TransitionItem>\n}\n\nclass TransitionOverlayView extends React.Component<Props> {\n  constructor(props: Props, context) {\n    super(props, context);\n    this._isMounted = false;\n    this.getInterpolation = this.getInterpolation.bind(this);\n  }\n\n  _isMounted: boolean;\n\n  _nativeInterpolation: any;\n\n  _interpolation: any;\n\n  /* shouldComponentUpdate(nextProps: Props) {\n    const { direction, fromRoute, toRoute, index, sharedElements, transitionElements } = this.props;\n    const seDiffers = !compareSharedElements(sharedElements, nextProps.sharedElements);\n    const teDiffers = !compareTransitionElements(transitionElements, nextProps.transitionElements);\n    if (direction !== nextProps.direction\n      || index !== nextProps.index\n      || fromRoute !== nextProps.fromRoute\n      || toRoute !== nextProps.toRoute\n      || seDiffers || teDiffers) {\n      return true;\n    }\n    return false;\n  }*/\n\n  render() {\n    const { fromRoute, toRoute } = this.props;\n    let { transitionElements, sharedElements } = this.props;\n    const from = fromRoute;\n    const to = toRoute;\n    transitionElements = transitionElements ? transitionElements\n      .filter(i => !i.inline && (i.route === from || i.route === to)) : [];\n\n    sharedElements = sharedElements ? sharedElements\n      .filter(p => (p.fromItem.route === from || p.fromItem.route === to)\n        && (p.toItem.route === from || p.toItem.route === to)) : [];\n\n    const transitionContext = this.getTransitionContext(transitionElements);\n    if (!transitionContext || !this.getMetricsReady()\n      || (sharedElements.length === 0 && transitionElements.length === 0)) {\n      return <View style={styles.overlay} pointerEvents=\"none\" />;\n    }\n\n    this._interpolation = null;\n    this._nativeInterpolation = null;\n\n    const transitionViews = getTransitionElements(transitionElements, transitionContext);\n    const sharedElementViews = getSharedElements(sharedElements, this.getInterpolation);\n    const anchoredViews = getAnchoredElements(sharedElements, this.getInterpolation);\n\n    let views = [...transitionViews, ...sharedElementViews, ...anchoredViews];\n    views = sortBy(views, 'props.index');\n\n    return (\n      <Animated.View\n        style={[\n          styles.overlay,\n          this.getVisibilityStyle(),\n        ]}\n        pointerEvents=\"none\"\n      >\n        {views}\n      </Animated.View>\n    );\n  }\n\n  getVisibilityStyle() {\n    const { getTransitionProgress } = this.context;\n    const { index } = this.props;\n\n    if (!getTransitionProgress) return {};\n    const progress = getTransitionProgress();\n    if (!progress) return { opacity: 0 };\n\n    const inputRange = [index - 1, (index - 1) + Constants.OP, index - Constants.OP, index];\n    const outputRange = [0, 1, 1, 0];\n    const visibility = progress.interpolate({ inputRange, outputRange });\n\n    return { opacity: visibility };\n  }\n\n  getMetricsReady(): boolean {\n    let metricsReady = true;\n    const { transitionElements, sharedElements } = this.props;\n    if (transitionElements) {\n      transitionElements.forEach(item => {\n        if (!item.metrics) {\n          metricsReady = false;\n        }\n      });\n    }\n\n    if (sharedElements) {\n      sharedElements.forEach(pair => {\n        if (!pair.toItem.metrics || !pair.fromItem.metrics) {\n          metricsReady = false;\n        }\n        if (pair.fromItem && pair.fromItem.anchors) {\n          for (let n = 0; n < pair.fromItem.anchors.length; n++) {\n            if (!pair.fromItem.anchors[n].metrics) {\n              metricsReady = false;\n              break;\n            }\n          }\n        }\n        if (pair.toItem && pair.toItem.anchors) {\n          for (let n = 0; n < pair.toItem.anchors.length; n++) {\n            if (!pair.toItem.anchors[n].metrics) {\n              metricsReady = false;\n              break;\n            }\n          }\n        }\n      });\n    }\n    return metricsReady;\n  }\n\n  getInterpolation(useNativeDriver: boolean) {\n    const { getTransitionProgress, getIndex } = this.context;\n    if (!getTransitionProgress || !getIndex) return null;\n\n    const index = getIndex();\n    const inputRange = [index - 1, index, index + 1];\n\n    if (useNativeDriver && !this._nativeInterpolation) {\n      this._nativeInterpolation = getTransitionProgress(true).interpolate({\n        inputRange, outputRange: [0, 1, 0],\n      });\n    } else if (!useNativeDriver && !this._interpolation) {\n      this._interpolation = getTransitionProgress(false).interpolate({\n        inputRange, outputRange: [0, 1, 0],\n      });\n    }\n\n    if (useNativeDriver) return this._nativeInterpolation;\n    return this._interpolation;\n  }\n\n  getTransitionContext(transitionElements): TransitionContext {\n    const { getDirectionForRoute, getIndex, getDirection,\n      getRoutes, getTransitionProgress } = this.context;\n\n    if (!transitionElements || !getDirectionForRoute || !getDirection\n      || !getRoutes || !getIndex || !getTransitionProgress) {\n      return null;\n    }\n\n    const delayCountFrom = transitionElements\n      .filter(item => getDirectionForRoute(item.name, item.route) === RouteDirection.from)\n      .reduce((prevValue, item) => (item.delay ? prevValue + 1 : prevValue), 0);\n\n    const delayCountTo = transitionElements\n      .filter(item => getDirectionForRoute(item.name, item.route) === RouteDirection.to)\n      .reduce((prevValue, item) => (item.delay ? prevValue + 1 : prevValue), 0);\n\n    const navDirection = getDirection();\n    const delayIndexFrom = 0;\n    const delayIndexTo = Math.max(0, delayCountTo - 1);\n    const delayFromFactor = 1;\n    const delayToFactor = -1;\n\n    return {\n      delayCountFrom,\n      delayCountTo,\n      navDirection,\n      delayIndexFrom,\n      delayIndexTo,\n      delayToFactor,\n      delayFromFactor,\n      getDirectionForRoute,\n      getIndex,\n      getTransitionProgress,\n      getRoutes,\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  static contextTypes = {\n    getTransitionProgress: PropTypes.func,\n    getDirectionForRoute: PropTypes.func,\n    getDirection: PropTypes.func,\n    getIndex: PropTypes.func,\n    getRoutes: PropTypes.func,\n  }\n}\n\nconst styles: StyleSheet.Styles = StyleSheet.create({\n  overlay: {\n    position: 'absolute',\n    // backgroundColor: '#FF00AE11',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\nexport default TransitionOverlayView;\n"]},"metadata":{},"sourceType":"module"}