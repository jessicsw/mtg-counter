{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/jessicsw/Desktop/Projects/Counter/node_modules/react-navigation-fluid-transitions/createFluidNavigator.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { StackRouter, createNavigator, StackActions, getCustomActionCreators, defaultNavigationOptions as reactNavigationDefaultNavigationOptions } from 'react-navigation';\nimport FluidTransitioner from \"./FluidTransitioner\";\nexport default (function (routeConfigMap) {\n  var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var initialRouteName = stackConfig.initialRouteName,\n      initialRouteParams = stackConfig.initialRouteParams,\n      paths = stackConfig.paths,\n      mode = stackConfig.mode,\n      transitionConfig = stackConfig.transitionConfig,\n      defaultNavigationOptions = stackConfig.defaultNavigationOptions,\n      style = stackConfig.style;\n\n  var stackRouterConfig = _objectSpread(_objectSpread({}, reactNavigationDefaultNavigationOptions), {}, {\n    initialRouteName: initialRouteName,\n    initialRouteParams: initialRouteParams,\n    paths: paths,\n    defaultNavigationOptions: defaultNavigationOptions,\n    getCustomActionCreators: getCustomActionCreators\n  });\n\n  var FluidNavigationView = function (_React$Component) {\n    _inherits(FluidNavigationView, _React$Component);\n\n    var _super = _createSuper(FluidNavigationView);\n\n    function FluidNavigationView() {\n      _classCallCheck(this, FluidNavigationView);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(FluidNavigationView, [{\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            navigation = _this$props.navigation,\n            screenProps = _this$props.screenProps,\n            descriptors = _this$props.descriptors,\n            onTransitionStart = _this$props.onTransitionStart,\n            _onTransitionEnd = _this$props.onTransitionEnd;\n        return React.createElement(FluidTransitioner, {\n          mode: mode,\n          style: style,\n          navigation: navigation,\n          screenProps: screenProps,\n          descriptors: descriptors,\n          transitionConfig: transitionConfig,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: function onTransitionEnd(transition, lastTransition) {\n            if (transition.navigation.state.isTransitioning) {\n              navigation.dispatch(StackActions.completeTransition({\n                key: navigation.state.key,\n                toChildKey: navigation.state.routes[navigation.state.index].key\n              }));\n            }\n\n            if (_onTransitionEnd) _onTransitionEnd(transition, lastTransition);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 9\n          }\n        });\n      }\n    }]);\n\n    return FluidNavigationView;\n  }(React.Component);\n\n  var router = StackRouter(routeConfigMap, stackRouterConfig);\n  return createNavigator(FluidNavigationView, router, stackConfig);\n});","map":{"version":3,"sources":["/Users/jessicsw/Desktop/Projects/Counter/node_modules/react-navigation-fluid-transitions/createFluidNavigator.js"],"names":["React","StackRouter","createNavigator","StackActions","getCustomActionCreators","defaultNavigationOptions","reactNavigationDefaultNavigationOptions","FluidTransitioner","routeConfigMap","stackConfig","initialRouteName","initialRouteParams","paths","mode","transitionConfig","style","stackRouterConfig","FluidNavigationView","props","navigation","screenProps","descriptors","onTransitionStart","onTransitionEnd","transition","lastTransition","state","isTransitioning","dispatch","completeTransition","key","toChildKey","routes","index","Component","router"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,WADF,EAEEC,eAFF,EAGEC,YAHF,EAIEC,uBAJF,EAKEC,wBAAwB,IAAIC,uCAL9B,QAMO,kBANP;AAQA,OAAOC,iBAAP;AAEA,gBAAe,UAACC,cAAD,EAAsC;AAAA,MAArBC,WAAqB,uEAAP,EAAO;AAAA,MAEjDC,gBAFiD,GAS/CD,WAT+C,CAEjDC,gBAFiD;AAAA,MAGjDC,kBAHiD,GAS/CF,WAT+C,CAGjDE,kBAHiD;AAAA,MAIjDC,KAJiD,GAS/CH,WAT+C,CAIjDG,KAJiD;AAAA,MAKjDC,IALiD,GAS/CJ,WAT+C,CAKjDI,IALiD;AAAA,MAMjDC,gBANiD,GAS/CL,WAT+C,CAMjDK,gBANiD;AAAA,MAOjDT,wBAPiD,GAS/CI,WAT+C,CAOjDJ,wBAPiD;AAAA,MAQjDU,KARiD,GAS/CN,WAT+C,CAQjDM,KARiD;;AAWnD,MAAMC,iBAAiB,mCAClBV,uCADkB;AAErBI,IAAAA,gBAAgB,EAAhBA,gBAFqB;AAGrBC,IAAAA,kBAAkB,EAAlBA,kBAHqB;AAIrBC,IAAAA,KAAK,EAALA,KAJqB;AAKrBP,IAAAA,wBAAwB,EAAxBA,wBALqB;AAMrBD,IAAAA,uBAAuB,EAAvBA;AANqB,IAAvB;;AAXmD,MAoB7Ca,mBApB6C;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAqBxC;AAAA,0BAEe,KAAKC,KAFpB;AAAA,YACCC,UADD,eACCA,UADD;AAAA,YACaC,WADb,eACaA,WADb;AAAA,YAC0BC,WAD1B,eAC0BA,WAD1B;AAAA,YACuCC,iBADvC,eACuCA,iBADvC;AAAA,YAELC,gBAFK,eAELA,eAFK;AAIP,eACE,oBAAC,iBAAD;AACE,UAAA,IAAI,EAAEV,IADR;AAEE,UAAA,KAAK,EAAEE,KAFT;AAGE,UAAA,UAAU,EAAEI,UAHd;AAIE,UAAA,WAAW,EAAEC,WAJf;AAKE,UAAA,WAAW,EAAEC,WALf;AAME,UAAA,gBAAgB,EAAEP,gBANpB;AAOE,UAAA,iBAAiB,EAAEQ,iBAPrB;AAQE,UAAA,eAAe,EAAE,yBAACE,UAAD,EAAaC,cAAb,EAAgC;AAC/C,gBAAID,UAAU,CAACL,UAAX,CAAsBO,KAAtB,CAA4BC,eAAhC,EAAiD;AAC/CR,cAAAA,UAAU,CAACS,QAAX,CACEzB,YAAY,CAAC0B,kBAAb,CAAgC;AAC9BC,gBAAAA,GAAG,EAAEX,UAAU,CAACO,KAAX,CAAiBI,GADQ;AAE9BC,gBAAAA,UAAU,EAAEZ,UAAU,CAACO,KAAX,CAAiBM,MAAjB,CAAwBb,UAAU,CAACO,KAAX,CAAiBO,KAAzC,EAAgDH;AAF9B,eAAhC,CADF;AAMD;;AACD,gBAAIP,gBAAJ,EAAqBA,gBAAe,CAACC,UAAD,EAAaC,cAAb,CAAf;AACtB,WAlBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;AA/CgD;;AAAA;AAAA,IAoBjBzB,KAAK,CAACkC,SApBW;;AAkDnD,MAAMC,MAAM,GAAGlC,WAAW,CAACO,cAAD,EAAiBQ,iBAAjB,CAA1B;AACA,SAAOd,eAAe,CAACe,mBAAD,EAAsBkB,MAAtB,EAA8B1B,WAA9B,CAAtB;AACD,CApDD","sourcesContent":["import React from 'react';\nimport {\n  StackRouter,\n  createNavigator,\n  StackActions,\n  getCustomActionCreators,\n  defaultNavigationOptions as reactNavigationDefaultNavigationOptions,\n} from 'react-navigation';\n\nimport FluidTransitioner from './FluidTransitioner';\n\nexport default (routeConfigMap, stackConfig = {}) => {\n  const {\n    initialRouteName,\n    initialRouteParams,\n    paths,\n    mode,\n    transitionConfig,\n    defaultNavigationOptions,\n    style,\n  } = stackConfig;\n\n  const stackRouterConfig = {\n    ...reactNavigationDefaultNavigationOptions,\n    initialRouteName,\n    initialRouteParams,\n    paths,\n    defaultNavigationOptions,\n    getCustomActionCreators,\n  };\n\n  class FluidNavigationView extends React.Component {\n    render() {\n      const { navigation, screenProps, descriptors, onTransitionStart,\n        onTransitionEnd } = this.props;\n\n      return (\n        <FluidTransitioner\n          mode={mode}\n          style={style}\n          navigation={navigation}\n          screenProps={screenProps}\n          descriptors={descriptors}\n          transitionConfig={transitionConfig}\n          onTransitionStart={onTransitionStart}\n          onTransitionEnd={(transition, lastTransition) => {\n            if (transition.navigation.state.isTransitioning) {\n              navigation.dispatch(\n                StackActions.completeTransition({\n                  key: navigation.state.key,\n                  toChildKey: navigation.state.routes[navigation.state.index].key\n                }),\n              );\n            }\n            if (onTransitionEnd) onTransitionEnd(transition, lastTransition);\n          }}\n        />\n      );\n    }\n  }\n\n  const router = StackRouter(routeConfigMap, stackRouterConfig);\n  return createNavigator(FluidNavigationView, router, stackConfig);\n};\n"]},"metadata":{},"sourceType":"module"}