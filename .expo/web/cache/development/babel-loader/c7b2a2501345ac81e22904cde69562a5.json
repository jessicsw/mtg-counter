{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nexport default function useLongPress() {\n  var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n  var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      startLongPress = _useState2[0],\n      setStartLongPress = _useState2[1];\n\n  useEffect(function () {\n    var timer;\n\n    if (startLongPress) {\n      timer = setTimeout(callback, ms);\n    } else {\n      clearTimeout(timer);\n    }\n\n    return function () {\n      clearTimeout(timer);\n    };\n  }, [callback, ms, startLongPress]);\n  return {\n    onPressIn: function onPressIn() {\n      return setStartLongPress(true);\n    },\n    onPressOut: function onPressOut() {\n      return setStartLongPress(false);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/jessicsw/Desktop/Projects/Counter/helper/useLongPress.js"],"names":["useState","useEffect","useLongPress","callback","ms","startLongPress","setStartLongPress","timer","setTimeout","clearTimeout","onPressIn","onPressOut"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,YAAT,GAAqD;AAAA,MAA/BC,QAA+B,uEAApB,YAAM,CAAE,CAAY;AAAA,MAAVC,EAAU,uEAAL,GAAK;;AAAA,kBACtBJ,QAAQ,CAAC,KAAD,CADc;AAAA;AAAA,MAC3DK,cAD2D;AAAA,MAC3CC,iBAD2C;;AAGlEL,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIM,KAAJ;;AACA,QAAIF,cAAJ,EAAoB;AAClBE,MAAAA,KAAK,GAAGC,UAAU,CAACL,QAAD,EAAWC,EAAX,CAAlB;AACD,KAFD,MAEO;AACLK,MAAAA,YAAY,CAACF,KAAD,CAAZ;AACD;;AAED,WAAO,YAAM;AACXE,MAAAA,YAAY,CAACF,KAAD,CAAZ;AACD,KAFD;AAGD,GAXQ,EAWN,CAACJ,QAAD,EAAWC,EAAX,EAAeC,cAAf,CAXM,CAAT;AAaA,SAAO;AACLK,IAAAA,SAAS,EAAE;AAAA,aAAMJ,iBAAiB,CAAC,IAAD,CAAvB;AAAA,KADN;AAELK,IAAAA,UAAU,EAAE;AAAA,aAAML,iBAAiB,CAAC,KAAD,CAAvB;AAAA;AAFP,GAAP;AAID","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport default function useLongPress(callback = () => {}, ms = 100) {\n  const [startLongPress, setStartLongPress] = useState(false);\n\n  useEffect(() => {\n    let timer;\n    if (startLongPress) {\n      timer = setTimeout(callback, ms);\n    } else {\n      clearTimeout(timer);\n    }\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [callback, ms, startLongPress]);\n\n  return {\n    onPressIn: () => setStartLongPress(true),\n    onPressOut: () => setStartLongPress(false),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}