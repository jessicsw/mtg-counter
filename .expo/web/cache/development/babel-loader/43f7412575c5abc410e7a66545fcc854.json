{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport TransitionItem from \"./TransitionItem\";\nimport * as Constants from \"./TransitionConstants\";\nimport { createAnimatedWrapper, createAnimated } from \"./Utils\";\nimport { getCalculatedTransitionStyle } from \"./Transitions/getTransitionElements\";\nvar _uniqueBaseId = 'tcid';\nvar _uuidCount = 0;\nvar _zIndex = 1;\n\nvar Transition = function (_React$Component) {\n  _inherits(Transition, _React$Component);\n\n  var _super = _createSuper(Transition);\n\n  function Transition(props, context) {\n    var _this;\n\n    _classCallCheck(this, Transition);\n\n    _this = _super.call(this, props, context);\n\n    _this.setViewRef = function (ref) {\n      _this._viewRef = ref;\n    };\n\n    _this._name = _uniqueBaseId + \"-\" + _uuidCount++;\n    _this._animatedComponent = null;\n    return _this;\n  }\n\n  _createClass(Transition, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      return this.props !== nextProps;\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this$context = this.context,\n          route = _this$context.route,\n          register = _this$context.register;\n      var _this$props = this.props,\n          shared = _this$props.shared,\n          appear = _this$props.appear,\n          disappear = _this$props.disappear,\n          delay = _this$props.delay,\n          zIndex = _this$props.zIndex,\n          anchor = _this$props.anchor,\n          animated = _this$props.animated,\n          _this$props$inline = _this$props.inline,\n          inline = _this$props$inline === void 0 ? false : _this$props$inline;\n\n      if (register) {\n        this._route = route;\n        register(new TransitionItem(this._getName(), route, this, shared !== undefined, appear, disappear, delay !== undefined, zIndex || _zIndex++, anchor, animated, inline));\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n      var unregister = this.context.unregister;\n\n      if (unregister) {\n        unregister(this._getName(), this._route);\n      }\n    }\n  }, {\n    key: \"getNodeHandle\",\n    value: function getNodeHandle() {\n      return findNodeHandle(this._viewRef);\n    }\n  }, {\n    key: \"getViewRef\",\n    value: function getViewRef() {\n      return this._viewRef;\n    }\n  }, {\n    key: \"_getName\",\n    value: function _getName() {\n      var _this$props2 = this.props,\n          shared = _this$props2.shared,\n          name = _this$props2.name;\n\n      if (shared) {\n        return shared;\n      }\n\n      if (name) {\n        return name;\n      }\n\n      return this._name;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          children = _this$props3.children,\n          innerRef = _this$props3.innerRef;\n      var element = React.Children.only(children);\n\n      if (!element) {\n        return null;\n      }\n\n      if (!this._animatedComponent) {\n        this._animatedComponent = createAnimated();\n      }\n\n      if (!this._outerAnimatedComponent) {\n        this._outerAnimatedComponent = createAnimated();\n      }\n\n      var visibilityStyle = this.getVisibilityStyle();\n      var transitionStyle = this.getTransitionStyle();\n\n      var key = this._getName() + \"-\" + this._route;\n\n      element = React.createElement(element.type, _objectSpread(_objectSpread({}, element.props), {}, {\n        key: key,\n        ref: this.setViewRef\n      }));\n      return createAnimatedWrapper({\n        component: element,\n        nativeStyles: [visibilityStyle, transitionStyle, styles.transition],\n        nativeCached: this._outerAnimatedComponent,\n        cached: this._animatedComponent,\n        innerRef: innerRef,\n        log: true,\n        logPrefix: \"TV \" + this._getName() + \"/\" + this._route\n      });\n    }\n  }, {\n    key: \"getTransitionStyle\",\n    value: function getTransitionStyle() {\n      var _this$props$inline2 = this.props.inline,\n          inline = _this$props$inline2 === void 0 ? false : _this$props$inline2;\n      if (!inline) return {};\n      var _this$context2 = this.context,\n          getTransitionProgress = _this$context2.getTransitionProgress,\n          getIndex = _this$context2.getIndex,\n          getIsAnchored = _this$context2.getIsAnchored,\n          getIsPartOfSharedTransition = _this$context2.getIsPartOfSharedTransition,\n          getIsPartOfTransition = _this$context2.getIsPartOfTransition,\n          getRoutes = _this$context2.getRoutes,\n          getItemByNameAndRoute = _this$context2.getItemByNameAndRoute,\n          getDirectionForRoute = _this$context2.getDirectionForRoute,\n          getItemDelayInfo = _this$context2.getItemDelayInfo;\n      if (!getTransitionProgress || !getIndex || !getIsAnchored || !getIsPartOfSharedTransition || !getIsPartOfTransition || !getItemByNameAndRoute || !getDirectionForRoute || !getItemDelayInfo || !getRoutes) return {};\n      var progress = getTransitionProgress();\n      var index = getIndex();\n      if (!progress || index === undefined) return {};\n      var isPartOfTransition = getIsPartOfTransition(this._getName(), this._route);\n\n      if (isPartOfTransition) {\n        var item = getItemByNameAndRoute(this._getName(), this._route);\n        var routeDirection = getDirectionForRoute(this._getName(), this._route);\n        var delayInfo = getItemDelayInfo(item.name, item.route);\n        var transitionStyle = getCalculatedTransitionStyle(item, delayInfo.delayCount, delayInfo.delayIndex, index, routeDirection, progress, getRoutes().length === 1);\n        return transitionStyle;\n      }\n\n      return {};\n    }\n  }, {\n    key: \"getVisibilityStyle\",\n    value: function getVisibilityStyle() {\n      var _this$props$inline3 = this.props.inline,\n          inline = _this$props$inline3 === void 0 ? false : _this$props$inline3;\n      var _this$context3 = this.context,\n          getTransitionProgress = _this$context3.getTransitionProgress,\n          getIndex = _this$context3.getIndex,\n          getIsAnchored = _this$context3.getIsAnchored,\n          getIsPartOfSharedTransition = _this$context3.getIsPartOfSharedTransition,\n          getIsPartOfTransition = _this$context3.getIsPartOfTransition,\n          getItemByNameAndRoute = _this$context3.getItemByNameAndRoute,\n          getDirectionForRoute = _this$context3.getDirectionForRoute;\n      if (!getTransitionProgress || !getIndex || !getIsAnchored || !getIsPartOfSharedTransition || !getIsPartOfTransition || !getItemByNameAndRoute || !getDirectionForRoute) return {};\n      var progress = getTransitionProgress();\n      var index = getIndex();\n      if (!progress || index === undefined) return {};\n      var inputRange = [index - 1, index - 1 + Constants.OP, index - Constants.OP, index];\n      var outputRange = [1, 0, 0, 1];\n      var isPartOfSharedTransition = getIsPartOfSharedTransition(this._getName(), this._route);\n      var isPartOfTransition = getIsPartOfTransition(this._getName(), this._route);\n      var isAnchored = getIsAnchored(this._getName(), this._route);\n      var visibilityProgress = progress.interpolate({\n        inputRange: inputRange,\n        outputRange: outputRange\n      });\n\n      if (isPartOfSharedTransition || isPartOfTransition && !inline || isAnchored) {\n        return {\n          opacity: visibilityProgress\n        };\n      }\n\n      return {};\n    }\n  }]);\n\n  return Transition;\n}(React.Component);\n\nTransition.contextTypes = {\n  register: PropTypes.func,\n  unregister: PropTypes.func,\n  route: PropTypes.string,\n  getTransitionProgress: PropTypes.func,\n  getDirectionForRoute: PropTypes.func,\n  getDirection: PropTypes.func,\n  getIndex: PropTypes.func,\n  getIsPartOfSharedTransition: PropTypes.func,\n  getIsPartOfTransition: PropTypes.func,\n  getIsAnchored: PropTypes.func,\n  getItemByNameAndRoute: PropTypes.func,\n  getRoutes: PropTypes.func,\n  getItemDelayInfo: PropTypes.func\n};\nvar styles = StyleSheet.create({\n  transition: {}\n});\nexport default Transition;","map":{"version":3,"sources":["/Users/jessicsw/Desktop/Projects/Counter/node_modules/react-navigation-fluid-transitions/TransitionView.js"],"names":["React","PropTypes","TransitionItem","Constants","createAnimatedWrapper","createAnimated","getCalculatedTransitionStyle","_uniqueBaseId","_uuidCount","_zIndex","Transition","props","context","setViewRef","ref","_viewRef","_name","_animatedComponent","nextProps","route","register","shared","appear","disappear","delay","zIndex","anchor","animated","inline","_route","_getName","undefined","_isMounted","unregister","findNodeHandle","name","children","innerRef","element","Children","only","_outerAnimatedComponent","visibilityStyle","getVisibilityStyle","transitionStyle","getTransitionStyle","key","createElement","type","component","nativeStyles","styles","transition","nativeCached","cached","log","logPrefix","getTransitionProgress","getIndex","getIsAnchored","getIsPartOfSharedTransition","getIsPartOfTransition","getRoutes","getItemByNameAndRoute","getDirectionForRoute","getItemDelayInfo","progress","index","isPartOfTransition","item","routeDirection","delayInfo","delayCount","delayIndex","length","inputRange","OP","outputRange","isPartOfSharedTransition","isAnchored","visibilityProgress","interpolate","opacity","Component","contextTypes","func","string","getDirection","StyleSheet","create"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet, findNodeHandle } from 'react-native';\n\nimport TransitionItem from './TransitionItem';\nimport * as Constants from './TransitionConstants';\nimport { createAnimatedWrapper, createAnimated } from './Utils';\nimport { getCalculatedTransitionStyle } from './Transitions/getTransitionElements';\n\nconst _uniqueBaseId: string = 'tcid';\nlet _uuidCount: number = 0;\nlet _zIndex = 1;\n\ntype TransitionProps = {\n  name: string,\n  appear: ?boolean,\n  disappear: ?boolean,\n  shared: ?string,\n  delay: ?boolean,\n  animated: ?string,\n  anchor: ?string,\n  innerRef: ?any,\n  children: Array<any>,\n  zIndex: Number,\n  inline: ?boolean,\n}\n\nclass Transition extends React.Component<TransitionProps> {\n  static contextTypes = {\n    register: PropTypes.func,\n    unregister: PropTypes.func,\n    route: PropTypes.string,\n    getTransitionProgress: PropTypes.func,\n    getDirectionForRoute: PropTypes.func,\n    getDirection: PropTypes.func,\n    getIndex: PropTypes.func,\n    getIsPartOfSharedTransition: PropTypes.func,\n    getIsPartOfTransition: PropTypes.func,\n    getIsAnchored: PropTypes.func,\n    getItemByNameAndRoute: PropTypes.func,\n    getRoutes: PropTypes.func,\n    getItemDelayInfo: PropTypes.func,\n  }\n\n  constructor(props: TransitionProps, context: any) {\n    super(props, context);\n    this._name = `${_uniqueBaseId}-${_uuidCount++}`;\n    this._animatedComponent = null;\n  }\n\n  _name: string\n\n  _route: string\n\n  _isMounted: boolean;\n\n  _viewRef: any;\n\n  _animatedComponent: any;\n\n  _outerAnimatedComponent: any;\n\n  shouldComponentUpdate(nextProps) {\n    return (this.props !== nextProps);\n  }\n\n  componentWillMount() {\n    const { route, register } = this.context;\n    const { shared, appear, disappear, delay, zIndex, anchor,\n      animated, inline = false } = this.props;\n    if (register) {\n      this._route = route;\n      register(new TransitionItem(\n        this._getName(),\n        route,\n        this,\n        shared !== undefined,\n        appear,\n        disappear,\n        delay !== undefined,\n        zIndex || _zIndex++,\n        anchor,\n        animated,\n        inline,\n      ));\n    }\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    const { unregister } = this.context;\n    if (unregister) {\n      unregister(this._getName(), this._route);\n    }\n  }\n\n  getNodeHandle(): number {\n    return findNodeHandle(this._viewRef);\n  }\n\n  getViewRef(): any {\n    return this._viewRef;\n  }\n\n  _getName(): string {\n    const { shared, name } = this.props;\n    if (shared) { return shared; }\n    if (name) { return name; }\n    return this._name;\n  }\n\n  render() {\n    const { children, innerRef } = this.props;\n\n    let element = React.Children.only(children);\n    if (!element) { return null; }\n\n    if (!this._animatedComponent) { this._animatedComponent = createAnimated(); }\n    if (!this._outerAnimatedComponent) { this._outerAnimatedComponent = createAnimated(); }\n\n    const visibilityStyle = this.getVisibilityStyle();\n    const transitionStyle = this.getTransitionStyle();\n    const key = `${this._getName()}-${this._route}`;\n\n    element = React.createElement(element.type, {\n      ...element.props,\n      key,\n      ref: this.setViewRef,\n    });\n\n    return createAnimatedWrapper({\n      component: element,\n      nativeStyles: [visibilityStyle, transitionStyle, styles.transition],\n      nativeCached: this._outerAnimatedComponent,\n      cached: this._animatedComponent,\n      innerRef,\n      log: true,\n      logPrefix: `TV ${this._getName()}/${this._route}`,\n    });\n  }\n\n  setViewRef = (ref: any) => {\n    this._viewRef = ref;\n  }\n\n  getTransitionStyle() {\n    const { inline = false } = this.props;\n    if (!inline) return {};\n\n    const { getTransitionProgress, getIndex, getIsAnchored,\n      getIsPartOfSharedTransition, getIsPartOfTransition, getRoutes,\n      getItemByNameAndRoute, getDirectionForRoute, getItemDelayInfo } = this.context;\n    if (!getTransitionProgress\n      || !getIndex\n      || !getIsAnchored\n      || !getIsPartOfSharedTransition\n      || !getIsPartOfTransition\n      || !getItemByNameAndRoute\n      || !getDirectionForRoute\n      || !getItemDelayInfo\n      || !getRoutes) return {};\n\n    const progress = getTransitionProgress();\n    const index = getIndex();\n    if (!progress || index === undefined) return { };\n\n    const isPartOfTransition = getIsPartOfTransition(this._getName(), this._route);\n    if (isPartOfTransition) {\n      const item = getItemByNameAndRoute(this._getName(), this._route);\n      const routeDirection = getDirectionForRoute(this._getName(), this._route);\n      const delayInfo = getItemDelayInfo(item.name, item.route);\n      const transitionStyle = getCalculatedTransitionStyle(\n        item,\n        delayInfo.delayCount,\n        delayInfo.delayIndex,\n        index,\n        routeDirection,\n        progress,\n        getRoutes().length === 1,\n      );\n      return transitionStyle;\n    }\n    return {};\n  }\n\n  getVisibilityStyle() {\n    const { inline = false } = this.props;\n    const { getTransitionProgress, getIndex, getIsAnchored,\n      getIsPartOfSharedTransition, getIsPartOfTransition,\n      getItemByNameAndRoute, getDirectionForRoute } = this.context;\n    if (!getTransitionProgress || !getIndex || !getIsAnchored\n      || !getIsPartOfSharedTransition || !getIsPartOfTransition\n      || !getItemByNameAndRoute || !getDirectionForRoute) return {};\n\n    const progress = getTransitionProgress();\n    const index = getIndex();\n    if (!progress || index === undefined) return { };\n\n    const inputRange = [index - 1, (index - 1) + Constants.OP, index - Constants.OP, index];\n    const outputRange = [1, 0, 0, 1];\n\n    const isPartOfSharedTransition = getIsPartOfSharedTransition(this._getName(), this._route);\n    const isPartOfTransition = getIsPartOfTransition(this._getName(), this._route);\n    const isAnchored = getIsAnchored(this._getName(), this._route);\n    const visibilityProgress = progress.interpolate({ inputRange, outputRange });\n\n    if (isPartOfSharedTransition\n      || (isPartOfTransition && !inline)\n      || isAnchored) {\n      return { opacity: visibilityProgress };\n    }\n    return {};\n  }\n}\n\nconst styles = StyleSheet.create({\n  transition: {\n    // backgroundColor: '#0000EF22',\n    // borderColor: '#FF0000',\n    // borderWidth: 1,\n  },\n});\n\nexport default Transition;\n"]},"metadata":{},"sourceType":"module"}