{"ast":null,"code":"import { RouteDirection, TransitionSpecification } from \"../Types\";\nexport var getLeftTransition = function getLeftTransition(transitionSpecification) {\n  if (!transitionSpecification || transitionSpecification.metrics === undefined) {\n    return {};\n  }\n\n  var start = transitionSpecification.start,\n      end = transitionSpecification.end,\n      boundingbox = transitionSpecification.boundingbox;\n  var x = boundingbox.x,\n      width = boundingbox.width;\n  var distanceValue = -(width + x + 25);\n  var startValue = 0;\n  var endValue = distanceValue;\n\n  if (transitionSpecification.direction === RouteDirection.to) {\n    startValue = distanceValue;\n    endValue = 0;\n  }\n\n  var progress = transitionSpecification.progress.interpolate({\n    inputRange: [0, start, end, 1],\n    outputRange: [startValue, startValue, endValue, endValue]\n  });\n  return {\n    transform: [{\n      translateX: progress\n    }]\n  };\n};","map":{"version":3,"sources":["/Users/jessicsw/Desktop/Projects/Counter/node_modules/react-navigation-fluid-transitions/Transitions/getLeftTransition.js"],"names":["RouteDirection","TransitionSpecification","getLeftTransition","transitionSpecification","metrics","undefined","start","end","boundingbox","x","width","distanceValue","startValue","endValue","direction","to","progress","interpolate","inputRange","outputRange","transform","translateX"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,uBAAzB;AAEA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,uBAAD,EAAsD;AACrF,MAAI,CAACA,uBAAD,IAA4BA,uBAAuB,CAACC,OAAxB,KAAoCC,SAApE,EAA+E;AAAE,WAAO,EAAP;AAAY;;AADR,MAG7EC,KAH6E,GAGjDH,uBAHiD,CAG7EG,KAH6E;AAAA,MAGtEC,GAHsE,GAGjDJ,uBAHiD,CAGtEI,GAHsE;AAAA,MAGjEC,WAHiE,GAGjDL,uBAHiD,CAGjEK,WAHiE;AAAA,MAI7EC,CAJ6E,GAIhED,WAJgE,CAI7EC,CAJ6E;AAAA,MAI1EC,KAJ0E,GAIhEF,WAJgE,CAI1EE,KAJ0E;AAMrF,MAAMC,aAAa,GAAG,EAAED,KAAK,GAAGD,CAAR,GAAY,EAAd,CAAtB;AACA,MAAIG,UAAU,GAAG,CAAjB;AACA,MAAIC,QAAQ,GAAGF,aAAf;;AAEA,MAAIR,uBAAuB,CAACW,SAAxB,KAAsCd,cAAc,CAACe,EAAzD,EAA6D;AAC3DH,IAAAA,UAAU,GAAGD,aAAb;AACAE,IAAAA,QAAQ,GAAG,CAAX;AACD;;AAED,MAAMG,QAAQ,GAAGb,uBAAuB,CAACa,QAAxB,CAAiCC,WAAjC,CAA6C;AAC5DC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAIZ,KAAJ,EAAWC,GAAX,EAAgB,CAAhB,CADgD;AAE5DY,IAAAA,WAAW,EAAE,CAACP,UAAD,EAAaA,UAAb,EAAyBC,QAAzB,EAAmCA,QAAnC;AAF+C,GAA7C,CAAjB;AAKA,SAAO;AACLO,IAAAA,SAAS,EAAE,CAAC;AAAEC,MAAAA,UAAU,EAAEL;AAAd,KAAD;AADN,GAAP;AAGD,CAvBM","sourcesContent":["import { RouteDirection, TransitionSpecification } from '../Types';\n\nexport const getLeftTransition = (transitionSpecification: TransitionSpecification) => {\n  if (!transitionSpecification || transitionSpecification.metrics === undefined) { return {}; }\n\n  const { start, end, boundingbox } = transitionSpecification;\n  const { x, width } = boundingbox;\n\n  const distanceValue = -(width + x + 25);\n  let startValue = 0;\n  let endValue = distanceValue;\n\n  if (transitionSpecification.direction === RouteDirection.to) {\n    startValue = distanceValue;\n    endValue = 0;\n  }\n\n  const progress = transitionSpecification.progress.interpolate({\n    inputRange: [0, start, end, 1],\n    outputRange: [startValue, startValue, endValue, endValue],\n  });\n\n  return {\n    transform: [{ translateX: progress }],\n  };\n};\n"]},"metadata":{},"sourceType":"module"}