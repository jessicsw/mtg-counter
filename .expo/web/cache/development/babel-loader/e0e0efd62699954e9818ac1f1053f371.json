{"ast":null,"code":"import { RouteDirection, TransitionSpecification } from \"../Types\";\nexport var getTopTransition = function getTopTransition(transitionSpecification) {\n  if (!transitionSpecification || transitionSpecification.metrics === undefined) {\n    return {};\n  }\n\n  var start = transitionSpecification.start,\n      end = transitionSpecification.end,\n      boundingbox = transitionSpecification.boundingbox;\n  var y = boundingbox.y,\n      height = boundingbox.height;\n  var distanceValue = -(height + y + 25);\n  var startValue = 0;\n  var endValue = distanceValue;\n\n  if (transitionSpecification.direction === RouteDirection.to) {\n    startValue = distanceValue;\n    endValue = 0;\n  }\n\n  var progress = transitionSpecification.progress.interpolate({\n    inputRange: [0, start, end, 1],\n    outputRange: [startValue, startValue, endValue, endValue]\n  });\n  return {\n    transform: [{\n      translateY: progress\n    }]\n  };\n};","map":{"version":3,"sources":["/Users/jessicsw/Desktop/Projects/Counter/node_modules/react-navigation-fluid-transitions/Transitions/getTopTransition.js"],"names":["RouteDirection","TransitionSpecification","getTopTransition","transitionSpecification","metrics","undefined","start","end","boundingbox","y","height","distanceValue","startValue","endValue","direction","to","progress","interpolate","inputRange","outputRange","transform","translateY"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,uBAAzB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,uBAAD,EAAsD;AACpF,MAAI,CAACA,uBAAD,IAA4BA,uBAAuB,CAACC,OAAxB,KAAoCC,SAApE,EAA+E;AAAE,WAAO,EAAP;AAAa;;AADV,MAG5EC,KAH4E,GAGhDH,uBAHgD,CAG5EG,KAH4E;AAAA,MAGrEC,GAHqE,GAGhDJ,uBAHgD,CAGrEI,GAHqE;AAAA,MAGhEC,WAHgE,GAGhDL,uBAHgD,CAGhEK,WAHgE;AAAA,MAI5EC,CAJ4E,GAI9DD,WAJ8D,CAI5EC,CAJ4E;AAAA,MAIzEC,MAJyE,GAI9DF,WAJ8D,CAIzEE,MAJyE;AAMpF,MAAMC,aAAa,GAAG,EAAED,MAAM,GAAGD,CAAT,GAAa,EAAf,CAAtB;AACA,MAAIG,UAAU,GAAG,CAAjB;AACA,MAAIC,QAAQ,GAAGF,aAAf;;AAEA,MAAIR,uBAAuB,CAACW,SAAxB,KAAsCd,cAAc,CAACe,EAAzD,EAA6D;AAC3DH,IAAAA,UAAU,GAAGD,aAAb;AACAE,IAAAA,QAAQ,GAAG,CAAX;AACD;;AAED,MAAMG,QAAQ,GAAGb,uBAAuB,CAACa,QAAxB,CAAiCC,WAAjC,CAA6C;AAC5DC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAIZ,KAAJ,EAAWC,GAAX,EAAgB,CAAhB,CADgD;AAE5DY,IAAAA,WAAW,EAAE,CAACP,UAAD,EAAaA,UAAb,EAAyBC,QAAzB,EAAmCA,QAAnC;AAF+C,GAA7C,CAAjB;AAKA,SAAO;AACLO,IAAAA,SAAS,EAAE,CAAC;AACVC,MAAAA,UAAU,EAAEL;AADF,KAAD;AADN,GAAP;AAKD,CAzBM","sourcesContent":["import { RouteDirection, TransitionSpecification } from '../Types';\n\nexport const getTopTransition = (transitionSpecification: TransitionSpecification) => {\n  if (!transitionSpecification || transitionSpecification.metrics === undefined) { return { }; }\n\n  const { start, end, boundingbox } = transitionSpecification;\n  const { y, height } = boundingbox;\n\n  const distanceValue = -(height + y + 25);\n  let startValue = 0;\n  let endValue = distanceValue;\n\n  if (transitionSpecification.direction === RouteDirection.to) {\n    startValue = distanceValue;\n    endValue = 0;\n  }\n\n  const progress = transitionSpecification.progress.interpolate({\n    inputRange: [0, start, end, 1],\n    outputRange: [startValue, startValue, endValue, endValue],\n  });\n\n  return {\n    transform: [{\n      translateY: progress,\n    }],\n  };\n};\n"]},"metadata":{},"sourceType":"module"}