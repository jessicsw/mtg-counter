{"ast":null,"code":"import { RouteDirection, TransitionSpecification } from \"../Types\";\nexport var getFlipTransition = function getFlipTransition(transitionInfo) {\n  var progress = transitionInfo.progress,\n      start = transitionInfo.start,\n      end = transitionInfo.end,\n      direction = transitionInfo.direction;\n  var flipTo = '90deg';\n  var flipToSwap = \"-\" + flipTo;\n  var flipStart = '0deg';\n  var flipInterpolation = progress.interpolate({\n    inputRange: [0, start, end, 1],\n    outputRange: direction === RouteDirection.from ? [flipStart, flipStart, flipTo, flipTo] : [flipToSwap, flipToSwap, flipStart, flipStart]\n  });\n  return {\n    transform: [{\n      rotateX: flipInterpolation\n    }]\n  };\n};","map":{"version":3,"sources":["/Users/jessicsw/Desktop/Projects/Counter/node_modules/react-navigation-fluid-transitions/Transitions/getFlipTransition.js"],"names":["RouteDirection","TransitionSpecification","getFlipTransition","transitionInfo","progress","start","end","direction","flipTo","flipToSwap","flipStart","flipInterpolation","interpolate","inputRange","outputRange","from","transform","rotateX"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,uBAAzB;AAEA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,cAAD,EAA6C;AAAA,MACpEC,QADoE,GAChCD,cADgC,CACpEC,QADoE;AAAA,MAC1DC,KAD0D,GAChCF,cADgC,CAC1DE,KAD0D;AAAA,MACnDC,GADmD,GAChCH,cADgC,CACnDG,GADmD;AAAA,MAC9CC,SAD8C,GAChCJ,cADgC,CAC9CI,SAD8C;AAE5E,MAAMC,MAAM,GAAG,OAAf;AACA,MAAMC,UAAU,SAAOD,MAAvB;AACA,MAAME,SAAS,GAAG,MAAlB;AAEA,MAAMC,iBAAiB,GAAGP,QAAQ,CAACQ,WAAT,CAAqB;AAC7CC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAIR,KAAJ,EAAWC,GAAX,EAAgB,CAAhB,CADiC;AAE7CQ,IAAAA,WAAW,EAAEP,SAAS,KAAKP,cAAc,CAACe,IAA7B,GACT,CAACL,SAAD,EAAYA,SAAZ,EAAuBF,MAAvB,EAA+BA,MAA/B,CADS,GAET,CAACC,UAAD,EAAaA,UAAb,EAAyBC,SAAzB,EAAoCA,SAApC;AAJyC,GAArB,CAA1B;AAOA,SAAO;AACLM,IAAAA,SAAS,EAAE,CAAC;AAAEC,MAAAA,OAAO,EAAEN;AAAX,KAAD;AADN,GAAP;AAGD,CAhBM","sourcesContent":["import { RouteDirection, TransitionSpecification } from '../Types';\n\nexport const getFlipTransition = (transitionInfo: TransitionSpecification) => {\n  const { progress, start, end, direction } = transitionInfo;\n  const flipTo = '90deg';\n  const flipToSwap = `-${flipTo}`;\n  const flipStart = '0deg';\n\n  const flipInterpolation = progress.interpolate({\n    inputRange: [0, start, end, 1],\n    outputRange: direction === RouteDirection.from\n      ? [flipStart, flipStart, flipTo, flipTo]\n      : [flipToSwap, flipToSwap, flipStart, flipStart],\n  });\n\n  return {\n    transform: [{ rotateX: flipInterpolation }],\n  };\n};\n"]},"metadata":{},"sourceType":"module"}